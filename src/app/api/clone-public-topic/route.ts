import { NextRequest } from 'next/server';
import { withAuth, createSuccessResponse, createErrorResponse, type AuthenticatedRequest } from '@/lib/api-middleware';
import { getFirebaseAdmin } from '@/lib/firebase-admin';

async function handler(req: AuthenticatedRequest) {
  if (req.method !== 'POST') {
    return createErrorResponse('Method not allowed', 405);
  }

  try {
    const body = await req.json();
    const { publicTopicId } = body;

    if (!publicTopicId) {
      return createErrorResponse('Public topic ID is required', 400);
    }

    const userId = req.user!.uid;
    const { adminDb } = getFirebaseAdmin();

    // Get the public topic data
    // For now, we'll use sample data based on the ID
    const sampleTopicData = getSampleTopicData(publicTopicId);
    
    if (!sampleTopicData) {
      return createErrorResponse('Public topic not found', 404);
    }

    // Clone the topic to user's account
    await adminDb.collection('users').doc(userId).set({
      topic: sampleTopicData.topic,
      language: sampleTopicData.language,
      model: 'gemini-2.5-flash-lite',
      flashcards: sampleTopicData.flashcards,
      quiz: sampleTopicData.quiz,
      theory: sampleTopicData.theory,
      clonedFrom: publicTopicId,
      clonedAt: new Date(),
      updatedAt: new Date(),
    }, { merge: true });

    // Increment download count for the public topic
    // In production, this would update the actual public topic document
    console.log(`üìä Public topic ${publicTopicId} downloaded by user ${userId}`);

    return createSuccessResponse({
      success: true,
      message: 'Topic cloned successfully',
      topic: sampleTopicData.topic,
      language: sampleTopicData.language,
      contentStats: {
        flashcards: sampleTopicData.flashcards.length,
        quiz: sampleTopicData.quiz.length,
        theory: sampleTopicData.theory.length,
      }
    });

  } catch (error) {
    console.error('Clone public topic error:', error);
    return createErrorResponse('Internal server error', 500);
  }
}

function getSampleTopicData(topicId: string) {
  const topicData: Record<string, any> = {
    'topic_1': {
      topic: 'React Hooks',
      language: 'Vietnamese',
      flashcards: [
        {
          id: '1',
          question: 'useState l√† g√¨?',
          answer: 'useState l√† m·ªôt Hook cho ph√©p b·∫°n th√™m state v√†o functional components.',
          difficulty: 'beginner',
          tags: ['react', 'hooks', 'state']
        },
        {
          id: '2',
          question: 'useEffect ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ l√†m g√¨?',
          answer: 'useEffect cho ph√©p b·∫°n th·ª±c hi·ªán side effects trong functional components, nh∆∞ g·ªçi API, subscriptions, ho·∫∑c cleanup.',
          difficulty: 'intermediate',
          tags: ['react', 'hooks', 'effects']
        },
        {
          id: '3',
          question: 'useContext Hook ho·∫°t ƒë·ªông nh∆∞ th·∫ø n√†o?',
          answer: 'useContext cho ph√©p b·∫°n consume context values m√† kh√¥ng c·∫ßn Component wrapper, gi√∫p tr√°nh prop drilling.',
          difficulty: 'intermediate',
          tags: ['react', 'hooks', 'context']
        },
      ],
      quiz: [
        {
          id: '1',
          question: 'Hook n√†o ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ qu·∫£n l√Ω state trong functional component?',
          options: ['useState', 'setState', 'this.state', 'state'],
          correctAnswer: 'useState',
          explanation: 'useState l√† Hook ch√≠nh th·ª©c ƒë·ªÉ qu·∫£n l√Ω state trong functional components.',
          difficulty: 'beginner'
        },
        {
          id: '2',
          question: 'Khi n√†o useEffect s·∫Ω ƒë∆∞·ª£c g·ªçi m·∫∑c ƒë·ªãnh?',
          options: ['Ch·ªâ khi component mount', 'Sau m·ªói render', 'Ch·ªâ khi props thay ƒë·ªïi', 'Kh√¥ng bao gi·ªù'],
          correctAnswer: 'Sau m·ªói render',
          explanation: 'M·∫∑c ƒë·ªãnh useEffect ch·∫°y sau m·ªói render n·∫øu kh√¥ng c√≥ dependency array.',
          difficulty: 'intermediate'
        },
      ],
      theory: [
        {
          id: '1',
          title: 'Gi·ªõi thi·ªáu v·ªÅ React Hooks',
          content: `# React Hooks

React Hooks l√† c√°c h√†m ƒë·∫∑c bi·ªát cho ph√©p b·∫°n "hook into" c√°c t√≠nh nƒÉng c·ªßa React t·ª´ functional components.

## T·∫°i sao s·ª≠ d·ª•ng Hooks?

1. **ƒê∆°n gi·∫£n h√≥a code**: Kh√¥ng c·∫ßn class components
2. **T√°i s·ª≠ d·ª•ng logic**: D·ªÖ d√†ng chia s·∫ª stateful logic
3. **D·ªÖ test**: Functional components d·ªÖ test h∆°n

## Rules of Hooks

1. Ch·ªâ g·ªçi Hooks ·ªü top level
2. Ch·ªâ g·ªçi Hooks t·ª´ React functions`,
          order: 1
        },
        {
          id: '2',
          title: 'useState Hook',
          content: `# useState Hook

useState l√† Hook c∆° b·∫£n nh·∫•t ƒë·ªÉ qu·∫£n l√Ω state.

\`\`\`javascript
import { useState } from 'react';

function Counter() {
  const [count, setCount] = useState(0);
  
  return (
    <div>
      <p>You clicked {count} times</p>
      <button onClick={() => setCount(count + 1)}>
        Click me
      </button>
    </div>
  );
}
\`\`\`

## C√°ch ho·∫°t ƒë·ªông

- Tr·∫£ v·ªÅ m·ªôt array v·ªõi 2 elements: state value v√† setter function
- State ƒë∆∞·ª£c preserve gi·ªØa c√°c re-renders
- Setter function trigger re-render`,
          order: 2
        }
      ]
    },
    'topic_2': {
      topic: 'L·ªãch s·ª≠ La M√£',
      language: 'Vietnamese',
      flashcards: [
        {
          id: '1',
          question: 'ƒê·∫ø ch·∫ø La M√£ ƒë∆∞·ª£c th√†nh l·∫≠p v√†o nƒÉm n√†o?',
          answer: 'ƒê·∫ø ch·∫ø La M√£ ƒë∆∞·ª£c th√†nh l·∫≠p v√†o nƒÉm 27 TCN d∆∞·ªõi th·ªùi Augustus.',
          difficulty: 'beginner',
          tags: ['la m√£', 'l·ªãch s·ª≠', 'ƒë·∫ø ch·∫ø']
        },
        {
          id: '2',
          question: 'Julius Caesar l√† ai?',
          answer: 'Julius Caesar l√† m·ªôt t∆∞·ªõng qu√¢n v√† ch√≠nh tr·ªã gia La M√£ n·ªïi ti·∫øng, ƒë√£ chinh ph·ª•c Gaul v√† tr·ªü th√†nh ƒë·ªôc t√†i.',
          difficulty: 'beginner',
          tags: ['caesar', 'la m√£', 'ch√≠nh tr·ªã']
        }
      ],
      quiz: [
        {
          id: '1',
          question: 'Th√†nh ph·ªë La M√£ ƒë∆∞·ª£c th√†nh l·∫≠p v√†o nƒÉm n√†o theo truy·ªÅn thuy·∫øt?',
          options: ['753 TCN', '509 TCN', '27 TCN', '476 SCN'],
          correctAnswer: '753 TCN',
          explanation: 'Theo truy·ªÅn thuy·∫øt, La M√£ ƒë∆∞·ª£c th√†nh l·∫≠p nƒÉm 753 TCN b·ªüi Romulus.',
          difficulty: 'beginner'
        }
      ],
      theory: [
        {
          id: '1',
          title: 'Kh·ªüi ngu·ªìn c·ªßa La M√£',
          content: `# Kh·ªüi ngu·ªìn c·ªßa La M√£

## Truy·ªÅn thuy·∫øt th√†nh l·∫≠p

Theo truy·ªÅn thuy·∫øt, th√†nh ph·ªë La M√£ ƒë∆∞·ª£c th√†nh l·∫≠p nƒÉm 753 TCN b·ªüi Romulus v√† Remus.

## Th·ªùi k·ª≥ V∆∞∆°ng qu·ªëc (753-509 TCN)

La M√£ ban ƒë·∫ßu ƒë∆∞·ª£c cai tr·ªã b·ªüi c√°c vua, v·ªõi 7 vua truy·ªÅn thuy·∫øt.`,
          order: 1
        }
      ]
    }
  };

  return topicData[topicId] || null;
}

export const POST = withAuth(handler);
